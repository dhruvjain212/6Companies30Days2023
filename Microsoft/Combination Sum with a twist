Approach: Use recursion and backtracking
1.Create two arrays, one for storing the integers which gives sum = n and other one for storing the final answers.
2.Check for every number between 1 and 9(both inclusive) and check if sum becomes equal to n and keep a track of no. of digits used by subtracting k by 1.
3.Push the arr into final answer if the above condition is true.
4.Else return.

#include<vector>

class Solution {
public:

   void solve(int idx,int sum, vector<int>&arr, vector<vector<int>>&ans, int k, int n){

   if(k == 0 && sum== n){
    ans.push_back(arr);
    return;
   }
   if(sum > n){
       return ;
   }
   
   for(int i= idx; i<= 9; i++){
      arr.push_back(i);
      solve(i+1, sum+i, arr, ans, k-1, n);
      arr.pop_back();
   }
   }
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>>ans;
        vector<int>arr;
        solve(1,0, arr, ans, k, n);
        return ans;
    }
};
